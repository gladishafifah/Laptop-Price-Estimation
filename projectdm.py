# -*- coding: utf-8 -*-
"""projectDM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKvu5zLUOBiobeRehkjHkvN_8t7PY1Ck
"""

# Import pustaka yang digunakan
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.linear_model import LinearRegression

# Load dataset
df = pd.read_csv('LaptopClean.csv')
df.head()

df = df.rename(columns={
    'Operating System': 'Operating_System',
    'ScreenSize' : 'Screen_Size',
    'Model Name' : 'Model_Name'
})

new_atribut = ['Brand', 'Model_Name', 'Processor', 'Operating_System', 'Touch_Screen', 'Storage', 'RAM', 'Screen_Size', 'Price']
data = df[new_atribut]

data.head()

data.info()

data['Storage'] = df['Storage'].astype(int)
data['RAM'] = df['RAM'].astype(int)
data['Screen_Size'] = df['Screen_Size'].astype(int)

data.info()

data.head()

data = data.drop(columns=['Brand', 'Model_Name'])
data.head()

#change data type int unique
processor_mapping = {'Core i3': 0, 'M1': 1, 'Core i7': 2, 'Core i5': 3, 'Ryzen 5 Hexa Core': 4, 'Celeron Dual Core': 5, 'Ryzen 7 Octa Core': 6, 'Ryzen 5 Quad Core': 7, 'Ryzen 3 Dual Core': 8,
                     'Ryzen 3 Quad Core': 9, 'M2': 10, 'Celeron Quad Core': 11, 'Athlon Dual Core': 12, 'MediaTek Kompanio 1200': 13, 'Ryzen 9 Octa Core': 14, 'MediaTek MT8788': 15, 'Ryzen Z1 HexaCore': 16,
                     'MediaTek Kompanio 500': 17, 'Core i9': 18, 'MediaTek Kompanio 520': 19, 'Ryzen Z1 Octa Core': 20, 'Pentium Silver': 21, 'Ryzen 5': 22, 'M1 Max': 23, 'M2 Max': 24, 'M3 Pro': 25,
                     'M1 Pro': 26, 'Ryzen 7 Quad Core': 27, 'Ryzen 5 Dual Core': 28, 'Ryzen 9 16 Core': 29}

os_mapping = {'Windows 11 Home': 0,'Mac OS Big Sur': 1, 'DOS': 2, 'Mac OS Monterey': 3, 'Chrome': 4, 'Windows 10': 5, 'Windows 10 Home': 6, 'Prime OS': 7, 'Windows 11 Pro': 8, 'Ubuntu': 9, 'Windows 10 Pro': 10,
              'macOS Ventura': 11, 'macOS Sonoma': 12, 'Mac OS Mojave': 13}

ts_mapping = {'No': 0, 'Yes': 1}

data['Processor'] = data['Processor'].map(processor_mapping)
data['Operating_System'] = data['Operating_System'].map(os_mapping)
data['Touch_Screen'] = data['Touch_Screen'].map(ts_mapping)

data.head()

data.isnull().sum()

# Separate features and target
X = data.drop(columns='Price')  # Gantilah 'target' dengan nama kolom target Anda
y = data['Price']  # Gantilah 'target' dengan nama kolom target Anda

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

pred_linear = linear_model.predict(X_test)

mse_linear = mean_squared_error(y_test, pred_linear)
mae_linear = mean_absolute_error(y_test, pred_linear)
rmse_linear = mean_squared_error(y_test, pred_linear, squared=False)
r2_linear = r2_score(y_test, pred_linear)

print(f'Mean Squared Error (MSE): {mse_linear:.2f}')
print(f'Mean Absolute Error (MAE): {mae_linear:.2f}')
print(f'Root Mean Squared Error (RMSE): {rmse_linear:.2f}')
print(f'Nilai R-squared dari model Regresi Linear sebesar: {r2_linear:.2f}')

X_train.head()

# Sample input
Processor = str(input('Processor: '))
Operating_System = str(input('Operating System: '))
Touch_Screen = int(input('Touch Screen: (0 or 1): '))
Storage = int(input('Storage: '))
RAM = int(input('RAM: '))
Screen_Size = int(input('Screen Size: '))

# Encode processor and operating system
processor_encode = processor_mapping.get(Processor, -1)
os_encode = os_mapping.get(Operating_System, -1)

dataInference = {
    'Processor': [processor_encode],
    'Operating_System': [os_encode],
    'Touch_Screen': [Touch_Screen],
    'Storage': [Storage],
    'RAM': [RAM],
    'Screen_Size': [Screen_Size],
}

dataInference_df = pd.DataFrame(dataInference)
pred_inference = linear_model.predict(dataInference_df)
print('Prediksi Harga Laptop dalam Rupee Sebesar', pred_inference)

import pickle
pickle.dump(linear_model, open('linear.pkl', "wb"))